import requests
import numpy as np
import aiogram.types as types
from aiogram.types.input_file import FSInputFile
from aiogram.filters import Command, CommandStart
from lexicon import LEXICON_RU
from aiogram import Router
from PIL import Image
import torchvision.transforms.functional as TF
from data import generate_image, get_upscale_image
import io
from aiogram import Bot, Dispatcher
from config import load_config, Config

from super_image import ImageLoader
from keyboard import keyboard

from aiogram.types import Message, ContentType, BotCommand, InlineKeyboardButton
from aiogram.filters import Text
from aiogram.types import CallbackQuery

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config
config: Config = load_config()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot: Bot = Bot(token=config.tg_bot.token)
dp: Dispatcher = Dispatcher()



API_TOKEN = config.tg_bot.token

URI_INFO = f'https://api.telegram.org/bot{API_TOKEN}/getFile?file_id='
URI = f'https://api.telegram.org/file/bot{API_TOKEN}/'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
router: Router = Router()

@router.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(text=LEXICON_RU['/start'],
                         reply_markup=keyboard)

@router.message(Command(commands='help'))
# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
async def process_help_command(message: types.Message):
    await message.answer(text=LEXICON_RU['/help'])
#async def process_update_command(message: Message):    #–ø—Ä–æ—Å—Ç–æ
  #  await message.answer(message.json(indent=4, exclude_none=True))

@router.message(Command(commands='support'))
# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
async def process_help_command(message: types.Message):
    await message.answer(text=LEXICON_RU['/support'])

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
# –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ "/start" –∏ "/help"
@router.message()
async def process_message(message: types.Message):
    if message.content_type == ContentType.PHOTO:  #, F.content_type == ContentType.PHOTO
        file_id = message.photo[-1].file_id
        width = message.photo[-1].width
        height = message.photo[-1].height
        print(width)
        print(height)

        resp = requests.get(URI_INFO + file_id)

        img_path = resp.json()['result']['file_path']
        img = requests.get(URI + img_path)
        img = Image.open(io.BytesIO(img.content))
        #new_img = img.filter(ImageFilter.GaussianBlur(radius=50))  # —É–±—Ä–∞—Ç—å
        new_img = generate_image(img).astype(np.uint8)
        new_img = TF.to_pil_image(new_img)

        #–∫–æ—Ä–º–∏–º –µ—â–µ –º–æ–¥–µ–ª–∏ –∞–ø—Å–∫–µ–π–ª–µ—Ä—É
        preds = await get_upscale_image(new_img)
        # –≤–µ—Ä–Ω–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        resized_img = TF.resize(preds, [height, width])
        ImageLoader.save_image(resized_img, 'files/scaled_2x.png')
        photo = FSInputFile('files/scaled_2x.png')

        await bot.send_photo(chat_id=message.chat.id, photo=photo)

        #os.remove('files/scaled_2x.png')
        #return

    elif message.content_type == types.ContentType.TEXT:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.reply(text=f'–Ø –Ω–µ –æ—Ç–≤–µ—á–∞—é –Ω–∞ "{message.text}" ( Õ°‚ùõ‚ÄØÕú ñ Õ°‚ùõ)üñï')
    else:
        await message.reply(text=LEXICON_RU['wtf'])


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∞–ø–¥–µ–π—Ç —Ç–∏–ø–∞ CallbackQuery
# —Å data 'big_button_1_pressed'
@router.callback_query(Text(text=['big_button_1_pressed']))
async def process_button_1_press(callback: CallbackQuery):
    await callback.message.edit_text(
        text='–¢—ã –≤—ã–±—Ä–∞–ª Neon!üëΩ',
        reply_markup=callback.message.reply_markup)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∞–ø–¥–µ–π—Ç —Ç–∏–ø–∞ CallbackQuery
# —Å data 'big_button_2_pressed'
@router.callback_query(Text(text=['big_button_2_pressed']))
async def process_button_2_press(callback: CallbackQuery):
    await callback.message.edit_text(
        text='–¢—ã –≤—ã–±—Ä–∞–ª Upscale!üëæ',
        reply_markup=callback.message.reply_markup)

