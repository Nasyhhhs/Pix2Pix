import requests
import numpy as np
from aiogram import types
from aiogram.types.input_file import FSInputFile
from aiogram.filters import Command, CommandStart
from lexicon import LEXICON_RU
from aiogram import Router
from PIL import Image
import torchvision.transforms.functional as TF
from data import generate_image, get_upscale_image
import io
from aiogram import Bot, Dispatcher
from config import load_config, Config

from super_image import ImageLoader
from keyboard import keyboard

from aiogram.types import Message, ContentType, BotCommand, InlineKeyboardButton
from aiogram.filters import Text
from aiogram.types import CallbackQuery, InlineKeyboardButton,InlineKeyboardMarkup
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config
config: Config = load_config()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot: Bot = Bot(token=config.tg_bot.token)
dp: Dispatcher = Dispatcher()



API_TOKEN = config.tg_bot.token

URI_INFO = f'https://api.telegram.org/bot{API_TOKEN}/getFile?file_id='
URI = f'https://api.telegram.org/file/bot{API_TOKEN}/'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
router: Router = Router()


@router.message(Command(commands='start'))  #CommandStart() |
async def process_start_command(message: types.Message):
    await message.answer(text=LEXICON_RU['/start'])

@router.message(Command(commands='help'))
async def process_help_command(message: types.Message):
    await message.answer(text=LEXICON_RU['/help'])

@router.message(Command(commands='support'))
async def process_support_command(message: types.Message):
    await message.answer(text=LEXICON_RU['/support'])


#–æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
class InputImageData:
    def __init__(self):
        self.width = None
        self.height = None
        self.img = None


input_image_data = InputImageData()


@router.message()
async def process_message(message: types.Message):
    if message.content_type == types.ContentType.PHOTO:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file_id = photo.file_id

        input_image_data.width = photo.width

        input_image_data.height = photo.height
        print(input_image_data.width)
        print(input_image_data.height)
        resp = requests.get(URI_INFO + file_id)

        img_path = resp.json()['result']['file_path']
        img = requests.get(URI + img_path)

        input_image_data.img = Image.open(io.BytesIO(img.content))


        input_image_data.input_path = 'files/input.jpg'
        #shared_data.img.save(shared_data.input_path)  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–∏–∫
        #ImageLoader.save_image(img, input_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await message.answer(text='–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –ß—Ç–æ –¥–µ–ª–∞—Ç—å –±—É–¥–µ–º?', reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='Neon', callback_data='neon')],
            [InlineKeyboardButton(text='Upscale', callback_data='upscale')]
        ]))

        #await bot.send_photo(chat_id=message.chat.id, photo=InputFile(new_img_path))

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img.close()
        #os.remove(input_path)

    elif message.content_type == types.ContentType.TEXT:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.reply(text=f'–Ø –Ω–µ –æ—Ç–≤–µ—á–∞—é –Ω–∞ "{message.text}" ( Õ°‚ùõ‚ÄØÕú ñ Õ°‚ùõ)üñï')
    else:
        await message.reply(text=LEXICON_RU['wtf'])

@router.callback_query(Text(text=['neon', 'upscale']))
async def process_button_press(callback: CallbackQuery):
    await callback.answer()

    if callback.data == 'neon':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.answer(text='–í—ã–∑–æ–≤ Neon –ø—Ä–∏–Ω—è—Ç! –†–∞–±–æ—Ç–∞–µ–º, —à–µ—Ñ!')
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é Neon
        new_img = generate_image(input_image_data.img).astype(np.uint8)
        new_img = TF.to_pil_image(new_img)

        # –∫–æ—Ä–º–∏–º –µ—â–µ –º–æ–¥–µ–ª–∏ –∞–ø—Å–∫–µ–π–ª–µ—Ä—É
        preds = await get_upscale_image(new_img, scale=2)
        # –≤–µ—Ä–Ω–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        resized_img = TF.resize(preds, [input_image_data.height, input_image_data.width])
        ImageLoader.save_image(resized_img, 'files/neon.png')
        photo = FSInputFile('files/neon.png')
        await bot.send_photo(chat_id=callback.message.chat.id, photo=photo)



    elif callback.data == 'upscale':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.answer(text='–í—ã–∑–æ–≤ Upscale –ø—Ä–∏–Ω—è—Ç! –†–∞–±–æ—Ç–∞–µ–º, —à–µ—Ñ!')
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é Upscale
        # –∫–æ—Ä–º–∏–º –µ—â–µ –º–æ–¥–µ–ª–∏ –∞–ø—Å–∫–µ–π–ª–µ—Ä—É
        #img = Image.open('files/input.jpg')
        scale = 2
        preds = await get_upscale_image(input_image_data.img, scale=2)
        ImageLoader.save_image(preds, f'files/scaled_{scale}x.png')
        photo = FSInputFile(f'files/scaled_{scale}x.png')
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é PIL
        im = Image.open(f'files/scaled_{scale}x.png')

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_size = im.size
        print("–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–ø—Å–∫–µ–π–ª–∞:", image_size)
        await bot.send_photo(chat_id=callback.message.chat.id, photo=photo)





