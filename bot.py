from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.types import ContentType
from PIL import Image
from io import BytesIO
import io
import os
from aiogram.types.input_file import FSInputFile

from data import generate_image
import requests
import numpy as np
import torchvision.transforms.functional as TF
from super_image import EdsrModel, ImageLoader

from environs import Env

from config import load_config, Config


config: Config = load_config()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é bot_token
  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫ —Ç–∏–ø—É int
# –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π admin_id

API_TOKEN = config.tg_bot.token
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞

bot: Bot = Bot(token=API_TOKEN)
dp: Dispatcher = Dispatcher()

URI_INFO = f'https://api.telegram.org/bot{API_TOKEN}/getFile?file_id='
URI = f'https://api.telegram.org/file/bot{API_TOKEN}/'

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
async def process_start_command(message: Message):
    await message.answer('–ù—É —á—Ç–æ –∂, –∑–∞–ª–∏–≤–∞–π —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —è –ø—Ä–µ–≤—Ä–∞—â—É –µ–µ –≤ –Ω–µ–æ–Ω–æ–≤—ã–π —à–µ–¥–µ–≤—Ä! (–ù–æ —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ) üëæ ')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
async def process_help_command(message: Message):
    await message.answer('–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–ª—É—á–∏—à—å –≤ –æ—Ç–≤–µ—Ç ( Õ°‚ùõ‚ÄØÕú ñ Õ°‚ùõ)')
#async def process_update_command(message: Message):    #–ø—Ä–æ—Å—Ç–æ
  #  await message.answer(message.json(indent=4, exclude_none=True))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
# –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ "/start" –∏ "/help"

async def process_message(message: Message):
    if message.content_type == ContentType.PHOTO:  #, F.content_type == ContentType.PHOTO
        file_id = message.photo[-1].file_id
        width = message.photo[-1].width
        height = message.photo[-1].height

        resp = requests.get(URI_INFO + file_id)

        img_path = resp.json()['result']['file_path']
        img = requests.get(URI + img_path)
        img = Image.open(io.BytesIO(img.content))
        #new_img = img.filter(ImageFilter.GaussianBlur(radius=50))  # —É–±—Ä–∞—Ç—å
        new_img = generate_image(img).astype(np.uint8)
        new_img = TF.to_pil_image(new_img)
        #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        new_img.save("files/gen_.jpg")
        #photo =open('files/gen_.jpg', 'rb')

        #–∞–ø—Å–∫–µ–π–ª–∏–Ω–≥
        model = EdsrModel.from_pretrained('eugenesiow/edsr-base', scale=2)
        #image = Image.open("files/gen_.jpg")
        inputs = ImageLoader.load_image(new_img)
        preds = model(inputs)

        #–≤–µ—Ä–Ω–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä

        resized_img  = TF.resize(preds, (height, width))
        ImageLoader.save_image(resized_img, 'files/scaled_2x.png')
        ImageLoader.save_compare(inputs, resized_img, 'files/scaled_2x_compare.png')
        photo = FSInputFile('files/scaled_2x.png')
        #with open('files/gen_.jpg', 'rb') as photo:
        await bot.send_photo(chat_id=message.chat.id, photo=photo)
        #cyber_photo =  process_photo(message.photo[1].file_id)
        #await message.reply_photo(photo = open(f'files/gen_{epoch}.jpg','rb'))
        #os.remove('files/gen_.jpg')
        #return

    elif message.content_type == ContentType.TEXT:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.answer(text=f'–Ø –Ω–µ –æ—Ç–≤–µ—á–∞—é –Ω–∞ "{message.text}" ( Õ°‚ùõ‚ÄØÕú ñ Õ°‚ùõ)üñï')
    else:
        await message.reply(text='–ù—É –∏ —á—Ç–æ –∑–∞ —Ç—É—Ñ—Ç—É —Ç—ã –ø—Ä–∏—Å–ª–∞–ª –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑? –î–∞–≤–∞–π —Ñ–æ—Ç–æ!')



# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã
dp.message.register(process_start_command, Command(commands=['start']))
dp.message.register(process_help_command, Command(commands=['help']))


dp.message.register(process_message)


#–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—É–ª–ª–∏–Ω–≥, —Ç–æ –µ—Å—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –æ–ø—Ä–æ—Å —Å–µ—Ä–≤–µ—Ä–∞ Telegram –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–ø–¥–µ–π—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞. –í –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ –º–µ—Ç–æ–¥ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ run_polling –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
if __name__ == '__main__':
    dp.run_polling(bot)